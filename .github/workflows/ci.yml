name: Continuous Integration

concurrency:
  # For pushes, this lets concurrent runs happen, so each push gets a result.
  # But for other events (e.g. PRs), we can cancel the previous runs.
  group: ${{ github.workflow }}-${{ github.event_name == 'push' && github.sha || github.ref }}
  cancel-in-progress: true

on:
  pull_request:
    branches: [main]

  push:
    branches: [main]

permissions:
  contents: read
  id-token: write

jobs:
  install-tools:
    name: Install Tools
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Go
        uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
        with:
          go-version-file: go.mod
          cache: false

      - name: Cache Go and Tools
        id: cache
        timeout-minutes: 5
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            ~/go/bin
            ~/go/pkg/mod
            ~/.cache/go-build
            ./.tools
          key: go-cache-${{ runner.OS }}-${{ runner.ARCH }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            go-cache-${{ runner.OS }}-${{ runner.ARCH }}-

      - name: Make install-tools
        if: steps.cache.outputs.cache-hit != 'true'
        run: make install-tools

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: install-tools
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Go
        uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
        with:
          go-version-file: go.mod
          cache: false

      - name: Cache Go
        timeout-minutes: 5
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            ~/go/bin
            ~/go/pkg/mod
            ~/.cache/go-build
            ./.tools
          key: go-cache-${{ runner.OS }}-${{ runner.ARCH }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            go-cache-${{ runner.OS }}-${{ runner.ARCH }}-
          fail-on-cache-miss: true

      - name: Check packages are up-to-date
        run: |
          make tidy-all
          git diff -s --exit-code || (echo 'Packages are out of date. Run make tidy-all and commit the changes' && git --no-pager diff && exit 1)

      - name: Check Code Generation
        run: |
          make generate
          git diff -s --exit-code || (echo 'Generated code is out of date. Run make generate and commit the changes' && git --no-pager diff && exit 1)

      - name: Check crosslink run
        run: |
          make crosslink
          git diff -s --exit-code || (echo 'Replace statements not updated. Run make crosslink and commit the changes' && git --no-pager diff && exit 1)

      - name: Check formatting
        run: |
          make fmt-all
          git diff -s --exit-code || (echo 'Code is not formatted. Run make fmt-all and commit the changes' && git --no-pager diff && exit 1)

      - name: Check dependabot config
        run: |
          make gendependabot
          git diff -s --exit-code || (echo 'Dependabot config is out of date. Run make gendependabot and commit the changes' && git --no-pager diff && exit 1)

      - name: Make lint-all
        run: make lint-all

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: install-tools
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Go
        uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
        with:
          go-version-file: go.mod
          cache: false

      - name: Cache Go
        timeout-minutes: 5
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            ~/go/bin
            ~/go/pkg/mod
            ~/.cache/go-build
            ./.tools
          key: go-cache-${{ runner.OS }}-${{ runner.ARCH }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            go-cache-${{ runner.OS }}-${{ runner.ARCH }}-
          fail-on-cache-miss: true

      - name: Make test-all
        run: make test-all

  build-and-push:
    name: Build & push
    runs-on: ubuntu-latest
    needs:
      - lint
      - test

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Push to GAR
        uses: grafana/shared-workflows/actions/push-to-gar-docker@main
        with:
          # Only push to GAR on main branch pushes
          push: ${{ github.event_name == 'push' && github.ref_name == 'main' && 'true' || 'false' }}
          tags: |-
            ${{ github.sha }}
            "latest"
          context: "."
          image_name: "grafana-ci-otel-collector"
          environment: "dev"

      - name: Export GHA URL
        if: ${{ github.event_name == 'push' && github.ref_name == 'main' && true || false }}
        id: export-gha-url
        shell: bash
        run: |
          GHA_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "gha_url=${GHA_URL}" >> "${GITHUB_OUTPUT}"

      - name: Get Vault secrets
        if: ${{ github.event_name == 'push' && github.ref_name == 'main' && true || false }}
        uses: grafana/shared-workflows/actions/get-vault-secrets@main
        with:
          common_secrets: |
            GITHUB_APP_ID=updater-app:app-id
            GITHUB_APP_INSTALLATION_ID=updater-app:app-installation-id
            GITHUB_APP_PRIVATE_KEY=updater-app:private-key

      - id: 'submit-argowfs-deployment'
        if: ${{ github.event_name == 'push' && github.ref_name == 'main' && true || false }}
        name: 'Submit Argo Workflows deployment'
        uses: grafana/shared-workflows/actions/trigger-argo-workflow@ec620d967ceebc9580cd630cba0151eabbd8f252
        with:
          namespace: 'release-cd'
          workflow_template: 'cicd-o11y'
          parameters: |
            dockertag=${{ github.sha }}
