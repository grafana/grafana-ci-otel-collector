// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"time"

	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/receiver"
	conventions "go.opentelemetry.io/collector/semconv/v1.9.0"
)

// AttributeCiWorkflowItemStatus specifies the a value ci.workflow_item.status attribute.
type AttributeCiWorkflowItemStatus int

const (
	_ AttributeCiWorkflowItemStatus = iota
	AttributeCiWorkflowItemStatusSkipped
	AttributeCiWorkflowItemStatusBlocked
	AttributeCiWorkflowItemStatusDeclined
	AttributeCiWorkflowItemStatusWaitingOnDependencies
	AttributeCiWorkflowItemStatusPending
	AttributeCiWorkflowItemStatusRunning
	AttributeCiWorkflowItemStatusSuccess
	AttributeCiWorkflowItemStatusFailure
	AttributeCiWorkflowItemStatusKilled
	AttributeCiWorkflowItemStatusError
)

// String returns the string representation of the AttributeCiWorkflowItemStatus.
func (av AttributeCiWorkflowItemStatus) String() string {
	switch av {
	case AttributeCiWorkflowItemStatusSkipped:
		return "skipped"
	case AttributeCiWorkflowItemStatusBlocked:
		return "blocked"
	case AttributeCiWorkflowItemStatusDeclined:
		return "declined"
	case AttributeCiWorkflowItemStatusWaitingOnDependencies:
		return "waiting_on_dependencies"
	case AttributeCiWorkflowItemStatusPending:
		return "pending"
	case AttributeCiWorkflowItemStatusRunning:
		return "running"
	case AttributeCiWorkflowItemStatusSuccess:
		return "success"
	case AttributeCiWorkflowItemStatusFailure:
		return "failure"
	case AttributeCiWorkflowItemStatusKilled:
		return "killed"
	case AttributeCiWorkflowItemStatusError:
		return "error"
	}
	return ""
}

// MapAttributeCiWorkflowItemStatus is a helper map of string to AttributeCiWorkflowItemStatus attribute value.
var MapAttributeCiWorkflowItemStatus = map[string]AttributeCiWorkflowItemStatus{
	"skipped":                 AttributeCiWorkflowItemStatusSkipped,
	"blocked":                 AttributeCiWorkflowItemStatusBlocked,
	"declined":                AttributeCiWorkflowItemStatusDeclined,
	"waiting_on_dependencies": AttributeCiWorkflowItemStatusWaitingOnDependencies,
	"pending":                 AttributeCiWorkflowItemStatusPending,
	"running":                 AttributeCiWorkflowItemStatusRunning,
	"success":                 AttributeCiWorkflowItemStatusSuccess,
	"failure":                 AttributeCiWorkflowItemStatusFailure,
	"killed":                  AttributeCiWorkflowItemStatusKilled,
	"error":                   AttributeCiWorkflowItemStatusError,
}

type metricBuildsNumber struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills builds_number metric with initial data.
func (m *metricBuildsNumber) init() {
	m.data.SetName("builds_number")
	m.data.SetDescription("Number of builds.")
	m.data.SetUnit("{build}")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(false)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricBuildsNumber) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, ciWorkflowItemStatusAttributeValue string, gitRepoNameAttributeValue string, gitBranchNameAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("ci.workflow_item.status", ciWorkflowItemStatusAttributeValue)
	dp.Attributes().PutStr("git.repo.name", gitRepoNameAttributeValue)
	dp.Attributes().PutStr("git.branch.name", gitBranchNameAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricBuildsNumber) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricBuildsNumber) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricBuildsNumber(cfg MetricConfig) metricBuildsNumber {
	m := metricBuildsNumber{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricRepoInfo struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills repo_info metric with initial data.
func (m *metricRepoInfo) init() {
	m.data.SetName("repo_info")
	m.data.SetDescription("Repo status.")
	m.data.SetUnit("{repository}")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(false)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricRepoInfo) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, ciWorkflowItemStatusAttributeValue string, gitRepoNameAttributeValue string, gitBranchNameAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("ci.workflow_item.status", ciWorkflowItemStatusAttributeValue)
	dp.Attributes().PutStr("git.repo.name", gitRepoNameAttributeValue)
	dp.Attributes().PutStr("git.branch.name", gitBranchNameAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRepoInfo) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRepoInfo) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRepoInfo(cfg MetricConfig) metricRepoInfo {
	m := metricRepoInfo{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricRestartsTotal struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills restarts_total metric with initial data.
func (m *metricRestartsTotal) init() {
	m.data.SetName("restarts_total")
	m.data.SetDescription("Total number build restarts.")
	m.data.SetUnit("{restart}")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
}

func (m *metricRestartsTotal) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRestartsTotal) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRestartsTotal) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRestartsTotal(cfg MetricConfig) metricRestartsTotal {
	m := metricRestartsTotal{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

// MetricsBuilder provides an interface for scrapers to report metrics while taking care of all the transformations
// required to produce metric representation defined in metadata and user config.
type MetricsBuilder struct {
	config              MetricsBuilderConfig // config of the metrics builder.
	startTime           pcommon.Timestamp    // start time that will be applied to all recorded data points.
	metricsCapacity     int                  // maximum observed number of metrics per resource.
	metricsBuffer       pmetric.Metrics      // accumulates metrics data before emitting.
	buildInfo           component.BuildInfo  // contains version information.
	metricBuildsNumber  metricBuildsNumber
	metricRepoInfo      metricRepoInfo
	metricRestartsTotal metricRestartsTotal
}

// metricBuilderOption applies changes to default metrics builder.
type metricBuilderOption func(*MetricsBuilder)

// WithStartTime sets startTime on the metrics builder.
func WithStartTime(startTime pcommon.Timestamp) metricBuilderOption {
	return func(mb *MetricsBuilder) {
		mb.startTime = startTime
	}
}

func NewMetricsBuilder(mbc MetricsBuilderConfig, settings receiver.Settings, options ...metricBuilderOption) *MetricsBuilder {
	mb := &MetricsBuilder{
		config:              mbc,
		startTime:           pcommon.NewTimestampFromTime(time.Now()),
		metricsBuffer:       pmetric.NewMetrics(),
		buildInfo:           settings.BuildInfo,
		metricBuildsNumber:  newMetricBuildsNumber(mbc.Metrics.BuildsNumber),
		metricRepoInfo:      newMetricRepoInfo(mbc.Metrics.RepoInfo),
		metricRestartsTotal: newMetricRestartsTotal(mbc.Metrics.RestartsTotal),
	}

	for _, op := range options {
		op(mb)
	}
	return mb
}

// updateCapacity updates max length of metrics and resource attributes that will be used for the slice capacity.
func (mb *MetricsBuilder) updateCapacity(rm pmetric.ResourceMetrics) {
	if mb.metricsCapacity < rm.ScopeMetrics().At(0).Metrics().Len() {
		mb.metricsCapacity = rm.ScopeMetrics().At(0).Metrics().Len()
	}
}

// ResourceMetricsOption applies changes to provided resource metrics.
type ResourceMetricsOption func(pmetric.ResourceMetrics)

// WithResource sets the provided resource on the emitted ResourceMetrics.
// It's recommended to use ResourceBuilder to create the resource.
func WithResource(res pcommon.Resource) ResourceMetricsOption {
	return func(rm pmetric.ResourceMetrics) {
		res.CopyTo(rm.Resource())
	}
}

// WithStartTimeOverride overrides start time for all the resource metrics data points.
// This option should be only used if different start time has to be set on metrics coming from different resources.
func WithStartTimeOverride(start pcommon.Timestamp) ResourceMetricsOption {
	return func(rm pmetric.ResourceMetrics) {
		var dps pmetric.NumberDataPointSlice
		metrics := rm.ScopeMetrics().At(0).Metrics()
		for i := 0; i < metrics.Len(); i++ {
			switch metrics.At(i).Type() {
			case pmetric.MetricTypeGauge:
				dps = metrics.At(i).Gauge().DataPoints()
			case pmetric.MetricTypeSum:
				dps = metrics.At(i).Sum().DataPoints()
			}
			for j := 0; j < dps.Len(); j++ {
				dps.At(j).SetStartTimestamp(start)
			}
		}
	}
}

// EmitForResource saves all the generated metrics under a new resource and updates the internal state to be ready for
// recording another set of data points as part of another resource. This function can be helpful when one scraper
// needs to emit metrics from several resources. Otherwise calling this function is not required,
// just `Emit` function can be called instead.
// Resource attributes should be provided as ResourceMetricsOption arguments.
func (mb *MetricsBuilder) EmitForResource(rmo ...ResourceMetricsOption) {
	rm := pmetric.NewResourceMetrics()
	rm.SetSchemaUrl(conventions.SchemaURL)
	ils := rm.ScopeMetrics().AppendEmpty()
	ils.Scope().SetName("github.com/grafana/grafana-ci-otel-collector/receiver/dronereceiver")
	ils.Scope().SetVersion(mb.buildInfo.Version)
	ils.Metrics().EnsureCapacity(mb.metricsCapacity)
	mb.metricBuildsNumber.emit(ils.Metrics())
	mb.metricRepoInfo.emit(ils.Metrics())
	mb.metricRestartsTotal.emit(ils.Metrics())

	for _, op := range rmo {
		op(rm)
	}

	if ils.Metrics().Len() > 0 {
		mb.updateCapacity(rm)
		rm.MoveTo(mb.metricsBuffer.ResourceMetrics().AppendEmpty())
	}
}

// Emit returns all the metrics accumulated by the metrics builder and updates the internal state to be ready for
// recording another set of metrics. This function will be responsible for applying all the transformations required to
// produce metric representation defined in metadata and user config, e.g. delta or cumulative.
func (mb *MetricsBuilder) Emit(rmo ...ResourceMetricsOption) pmetric.Metrics {
	mb.EmitForResource(rmo...)
	metrics := mb.metricsBuffer
	mb.metricsBuffer = pmetric.NewMetrics()
	return metrics
}

// RecordBuildsNumberDataPoint adds a data point to builds_number metric.
func (mb *MetricsBuilder) RecordBuildsNumberDataPoint(ts pcommon.Timestamp, val int64, ciWorkflowItemStatusAttributeValue AttributeCiWorkflowItemStatus, gitRepoNameAttributeValue string, gitBranchNameAttributeValue string) {
	mb.metricBuildsNumber.recordDataPoint(mb.startTime, ts, val, ciWorkflowItemStatusAttributeValue.String(), gitRepoNameAttributeValue, gitBranchNameAttributeValue)
}

// RecordRepoInfoDataPoint adds a data point to repo_info metric.
func (mb *MetricsBuilder) RecordRepoInfoDataPoint(ts pcommon.Timestamp, val int64, ciWorkflowItemStatusAttributeValue AttributeCiWorkflowItemStatus, gitRepoNameAttributeValue string, gitBranchNameAttributeValue string) {
	mb.metricRepoInfo.recordDataPoint(mb.startTime, ts, val, ciWorkflowItemStatusAttributeValue.String(), gitRepoNameAttributeValue, gitBranchNameAttributeValue)
}

// RecordRestartsTotalDataPoint adds a data point to restarts_total metric.
func (mb *MetricsBuilder) RecordRestartsTotalDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricRestartsTotal.recordDataPoint(mb.startTime, ts, val)
}

// Reset resets metrics builder to its initial state. It should be used when external metrics source is restarted,
// and metrics builder should update its startTime and reset it's internal state accordingly.
func (mb *MetricsBuilder) Reset(options ...metricBuilderOption) {
	mb.startTime = pcommon.NewTimestampFromTime(time.Now())
	for _, op := range options {
		op(mb)
	}
}
