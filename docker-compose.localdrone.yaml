version: "3"
services:
  tempo:
    image: grafana/tempo:latest
    command: ["-config.file=/etc/tempo.yaml"]
    volumes:
      - ./config/tempo.yaml:/etc/tempo.yaml
    ports:
      - "3200:3200" # tempo
      - "4317:4317" # otlp grpc
  prometheus:
    image: prom/prometheus:latest
    ports:
      - 9090:9090
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--web.enable-lifecycle"
      - "--web.enable-remote-write-receiver"
      - "--config.file=/etc/prometheus/prometheus.yml"

  loki:
    image: grafana/loki:latest
    command: -config.file=/etc/loki/loki-config.yaml
    volumes:
      - ./config/loki.yml:/etc/loki/loki-config.yaml
    ports:
      - "3100:3100"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 5

  # For local drone development
  drone:
    image: drone/drone:latest
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8080:80"
    environment:
      - DRONE_SERVER_HOST=localhost
      - DRONE_SERVER_PROTO=http
      - DRONE_SERVER_PROXY_HOST=${DRONE_SERVER_PROXY_HOST}
      - DRONE_SERVER_PROXY_PROTO=https
      - DRONE_RPC_SECRET=48866d9ed701d1f0b917b7f8531c6247
      - DRONE_COOKIE_SECRET=e8206356c843d81e05ab6735e7ebf075
      - DRONE_COOKIE_TIMEOUT=720h
      - DRONE_GITHUB_CLIENT_ID=${DRONE_GITHUB_CLIENT_ID}
      - DRONE_GITHUB_CLIENT_SECRET=${DRONE_GITHUB_CLIENT_SECRET}
      - DRONE_LOGS_DEBUG=true
      - DRONE_CRON_DISABLED=true
      - DRONE_DATABASE_DRIVER=postgres
      - DRONE_DATABASE_DATASOURCE=postgres://postgres:postgres@db:5432/drone?sslmode=disable
      - DRONE_REDIS_CONNECTION=redis://redis-server:6379
      - DRONE_WEBHOOK_ENDPOINT=http://host.docker.internal:3333/drone/webhook
      - DRONE_WEBHOOK_SECRET=bea26a2221fd8090ea38720fc445eca6
      - DRONE_USER_CREATE=username:${GH_HANDLE},admin:true
      - DRONE_STATUS_NAME=continuous-integration/drone-local-${GH_HANDLE}
  runner:
    platform: "linux/amd64"
    image: drone/drone-runner-docker:linux-amd64
    environment:
      - DRONE_RPC_HOST=drone
      - DRONE_RPC_PROTO=http
      - DRONE_RPC_SECRET=48866d9ed701d1f0b917b7f8531c6247
      - DRONE_TMATE_ENABLED=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - drone
  redis-server:
    image: redis
  db:
    image: postgres
    environment:
      - DRONE_DB_USERNAME=${DRONE_DB_USERNAME}
      - DRONE_DB_PASSWORD=${DRONE_DB_PASSWORD}
      - DRONE_DB=${DRONE_DB}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
