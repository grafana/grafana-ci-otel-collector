// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	http "net/http"

	drone "github.com/drone/drone-go/drone"

	mock "github.com/stretchr/testify/mock"
)

// MockDroneClient is an autogenerated mock type for the droneClient type
type MockDroneClient struct {
	mock.Mock
}

// Approve provides a mock function with given fields: namespace, name, build, stage
func (_m *MockDroneClient) Approve(namespace string, name string, build int, stage int) error {
	ret := _m.Called(namespace, name, build, stage)

	if len(ret) == 0 {
		panic("no return value specified for Approve")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, int, int) error); ok {
		r0 = rf(namespace, name, build, stage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AutoscalePause provides a mock function with given fields:
func (_m *MockDroneClient) AutoscalePause() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AutoscalePause")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AutoscaleResume provides a mock function with given fields:
func (_m *MockDroneClient) AutoscaleResume() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AutoscaleResume")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AutoscaleVersion provides a mock function with given fields:
func (_m *MockDroneClient) AutoscaleVersion() (*drone.Version, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AutoscaleVersion")
	}

	var r0 *drone.Version
	var r1 error
	if rf, ok := ret.Get(0).(func() (*drone.Version, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *drone.Version); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drone.Version)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Build provides a mock function with given fields: namespace, name, build
func (_m *MockDroneClient) Build(namespace string, name string, build int) (*drone.Build, error) {
	ret := _m.Called(namespace, name, build)

	if len(ret) == 0 {
		panic("no return value specified for Build")
	}

	var r0 *drone.Build
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int) (*drone.Build, error)); ok {
		return rf(namespace, name, build)
	}
	if rf, ok := ret.Get(0).(func(string, string, int) *drone.Build); ok {
		r0 = rf(namespace, name, build)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drone.Build)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int) error); ok {
		r1 = rf(namespace, name, build)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BuildCancel provides a mock function with given fields: namespace, name, build
func (_m *MockDroneClient) BuildCancel(namespace string, name string, build int) error {
	ret := _m.Called(namespace, name, build)

	if len(ret) == 0 {
		panic("no return value specified for BuildCancel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, int) error); ok {
		r0 = rf(namespace, name, build)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BuildCreate provides a mock function with given fields: owner, name, commit, branch, params
func (_m *MockDroneClient) BuildCreate(owner string, name string, commit string, branch string, params map[string]string) (*drone.Build, error) {
	ret := _m.Called(owner, name, commit, branch, params)

	if len(ret) == 0 {
		panic("no return value specified for BuildCreate")
	}

	var r0 *drone.Build
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, map[string]string) (*drone.Build, error)); ok {
		return rf(owner, name, commit, branch, params)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, map[string]string) *drone.Build); ok {
		r0 = rf(owner, name, commit, branch, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drone.Build)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, map[string]string) error); ok {
		r1 = rf(owner, name, commit, branch, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BuildLast provides a mock function with given fields: namespace, name, branch
func (_m *MockDroneClient) BuildLast(namespace string, name string, branch string) (*drone.Build, error) {
	ret := _m.Called(namespace, name, branch)

	if len(ret) == 0 {
		panic("no return value specified for BuildLast")
	}

	var r0 *drone.Build
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*drone.Build, error)); ok {
		return rf(namespace, name, branch)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *drone.Build); ok {
		r0 = rf(namespace, name, branch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drone.Build)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(namespace, name, branch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BuildList provides a mock function with given fields: namespace, name, opts
func (_m *MockDroneClient) BuildList(namespace string, name string, opts drone.ListOptions) ([]*drone.Build, error) {
	ret := _m.Called(namespace, name, opts)

	if len(ret) == 0 {
		panic("no return value specified for BuildList")
	}

	var r0 []*drone.Build
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, drone.ListOptions) ([]*drone.Build, error)); ok {
		return rf(namespace, name, opts)
	}
	if rf, ok := ret.Get(0).(func(string, string, drone.ListOptions) []*drone.Build); ok {
		r0 = rf(namespace, name, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*drone.Build)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, drone.ListOptions) error); ok {
		r1 = rf(namespace, name, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BuildPurge provides a mock function with given fields: namespace, name, before
func (_m *MockDroneClient) BuildPurge(namespace string, name string, before int) error {
	ret := _m.Called(namespace, name, before)

	if len(ret) == 0 {
		panic("no return value specified for BuildPurge")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, int) error); ok {
		r0 = rf(namespace, name, before)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BuildRestart provides a mock function with given fields: namespace, name, build, params
func (_m *MockDroneClient) BuildRestart(namespace string, name string, build int, params map[string]string) (*drone.Build, error) {
	ret := _m.Called(namespace, name, build, params)

	if len(ret) == 0 {
		panic("no return value specified for BuildRestart")
	}

	var r0 *drone.Build
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int, map[string]string) (*drone.Build, error)); ok {
		return rf(namespace, name, build, params)
	}
	if rf, ok := ret.Get(0).(func(string, string, int, map[string]string) *drone.Build); ok {
		r0 = rf(namespace, name, build, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drone.Build)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int, map[string]string) error); ok {
		r1 = rf(namespace, name, build, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Cron provides a mock function with given fields: owner, name, cron
func (_m *MockDroneClient) Cron(owner string, name string, cron string) (*drone.Cron, error) {
	ret := _m.Called(owner, name, cron)

	if len(ret) == 0 {
		panic("no return value specified for Cron")
	}

	var r0 *drone.Cron
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*drone.Cron, error)); ok {
		return rf(owner, name, cron)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *drone.Cron); ok {
		r0 = rf(owner, name, cron)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drone.Cron)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(owner, name, cron)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CronCreate provides a mock function with given fields: owner, name, in
func (_m *MockDroneClient) CronCreate(owner string, name string, in *drone.Cron) (*drone.Cron, error) {
	ret := _m.Called(owner, name, in)

	if len(ret) == 0 {
		panic("no return value specified for CronCreate")
	}

	var r0 *drone.Cron
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, *drone.Cron) (*drone.Cron, error)); ok {
		return rf(owner, name, in)
	}
	if rf, ok := ret.Get(0).(func(string, string, *drone.Cron) *drone.Cron); ok {
		r0 = rf(owner, name, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drone.Cron)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, *drone.Cron) error); ok {
		r1 = rf(owner, name, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CronDelete provides a mock function with given fields: owner, name, cron
func (_m *MockDroneClient) CronDelete(owner string, name string, cron string) error {
	ret := _m.Called(owner, name, cron)

	if len(ret) == 0 {
		panic("no return value specified for CronDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(owner, name, cron)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CronExec provides a mock function with given fields: owner, name, cron
func (_m *MockDroneClient) CronExec(owner string, name string, cron string) error {
	ret := _m.Called(owner, name, cron)

	if len(ret) == 0 {
		panic("no return value specified for CronExec")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(owner, name, cron)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CronList provides a mock function with given fields: owner, name
func (_m *MockDroneClient) CronList(owner string, name string) ([]*drone.Cron, error) {
	ret := _m.Called(owner, name)

	if len(ret) == 0 {
		panic("no return value specified for CronList")
	}

	var r0 []*drone.Cron
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]*drone.Cron, error)); ok {
		return rf(owner, name)
	}
	if rf, ok := ret.Get(0).(func(string, string) []*drone.Cron); ok {
		r0 = rf(owner, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*drone.Cron)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(owner, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CronUpdate provides a mock function with given fields: owner, name, cron, in
func (_m *MockDroneClient) CronUpdate(owner string, name string, cron string, in *drone.CronPatch) (*drone.Cron, error) {
	ret := _m.Called(owner, name, cron, in)

	if len(ret) == 0 {
		panic("no return value specified for CronUpdate")
	}

	var r0 *drone.Cron
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, *drone.CronPatch) (*drone.Cron, error)); ok {
		return rf(owner, name, cron, in)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, *drone.CronPatch) *drone.Cron); ok {
		r0 = rf(owner, name, cron, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drone.Cron)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, *drone.CronPatch) error); ok {
		r1 = rf(owner, name, cron, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Decline provides a mock function with given fields: namespace, name, build, stage
func (_m *MockDroneClient) Decline(namespace string, name string, build int, stage int) error {
	ret := _m.Called(namespace, name, build, stage)

	if len(ret) == 0 {
		panic("no return value specified for Decline")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, int, int) error); ok {
		r0 = rf(namespace, name, build, stage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Encrypt provides a mock function with given fields: owner, name, secret
func (_m *MockDroneClient) Encrypt(owner string, name string, secret *drone.Secret) (string, error) {
	ret := _m.Called(owner, name, secret)

	if len(ret) == 0 {
		panic("no return value specified for Encrypt")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, *drone.Secret) (string, error)); ok {
		return rf(owner, name, secret)
	}
	if rf, ok := ret.Get(0).(func(string, string, *drone.Secret) string); ok {
		r0 = rf(owner, name, secret)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, *drone.Secret) error); ok {
		r1 = rf(owner, name, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Incomplete provides a mock function with given fields:
func (_m *MockDroneClient) Incomplete() ([]*drone.Repo, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Incomplete")
	}

	var r0 []*drone.Repo
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*drone.Repo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*drone.Repo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*drone.Repo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncompleteV2 provides a mock function with given fields:
func (_m *MockDroneClient) IncompleteV2() ([]*drone.RepoBuildStage, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IncompleteV2")
	}

	var r0 []*drone.RepoBuildStage
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*drone.RepoBuildStage, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*drone.RepoBuildStage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*drone.RepoBuildStage)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logs provides a mock function with given fields: owner, name, build, stage, step
func (_m *MockDroneClient) Logs(owner string, name string, build int, stage int, step int) ([]*drone.Line, error) {
	ret := _m.Called(owner, name, build, stage, step)

	if len(ret) == 0 {
		panic("no return value specified for Logs")
	}

	var r0 []*drone.Line
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int, int, int) ([]*drone.Line, error)); ok {
		return rf(owner, name, build, stage, step)
	}
	if rf, ok := ret.Get(0).(func(string, string, int, int, int) []*drone.Line); ok {
		r0 = rf(owner, name, build, stage, step)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*drone.Line)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int, int, int) error); ok {
		r1 = rf(owner, name, build, stage, step)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogsPurge provides a mock function with given fields: owner, name, build, stage, step
func (_m *MockDroneClient) LogsPurge(owner string, name string, build int, stage int, step int) error {
	ret := _m.Called(owner, name, build, stage, step)

	if len(ret) == 0 {
		panic("no return value specified for LogsPurge")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, int, int, int) error); ok {
		r0 = rf(owner, name, build, stage, step)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Node provides a mock function with given fields: name
func (_m *MockDroneClient) Node(name string) (*drone.Node, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Node")
	}

	var r0 *drone.Node
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*drone.Node, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *drone.Node); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drone.Node)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NodeCreate provides a mock function with given fields: in
func (_m *MockDroneClient) NodeCreate(in *drone.Node) (*drone.Node, error) {
	ret := _m.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for NodeCreate")
	}

	var r0 *drone.Node
	var r1 error
	if rf, ok := ret.Get(0).(func(*drone.Node) (*drone.Node, error)); ok {
		return rf(in)
	}
	if rf, ok := ret.Get(0).(func(*drone.Node) *drone.Node); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drone.Node)
		}
	}

	if rf, ok := ret.Get(1).(func(*drone.Node) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NodeDelete provides a mock function with given fields: name
func (_m *MockDroneClient) NodeDelete(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for NodeDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NodeList provides a mock function with given fields:
func (_m *MockDroneClient) NodeList() ([]*drone.Node, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NodeList")
	}

	var r0 []*drone.Node
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*drone.Node, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*drone.Node); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*drone.Node)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NodeUpdate provides a mock function with given fields: name, in
func (_m *MockDroneClient) NodeUpdate(name string, in *drone.NodePatch) (*drone.Node, error) {
	ret := _m.Called(name, in)

	if len(ret) == 0 {
		panic("no return value specified for NodeUpdate")
	}

	var r0 *drone.Node
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *drone.NodePatch) (*drone.Node, error)); ok {
		return rf(name, in)
	}
	if rf, ok := ret.Get(0).(func(string, *drone.NodePatch) *drone.Node); ok {
		r0 = rf(name, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drone.Node)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *drone.NodePatch) error); ok {
		r1 = rf(name, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrgSecret provides a mock function with given fields: namespace, secret
func (_m *MockDroneClient) OrgSecret(namespace string, secret string) (*drone.Secret, error) {
	ret := _m.Called(namespace, secret)

	if len(ret) == 0 {
		panic("no return value specified for OrgSecret")
	}

	var r0 *drone.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*drone.Secret, error)); ok {
		return rf(namespace, secret)
	}
	if rf, ok := ret.Get(0).(func(string, string) *drone.Secret); ok {
		r0 = rf(namespace, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drone.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(namespace, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrgSecretCreate provides a mock function with given fields: namespace, secret
func (_m *MockDroneClient) OrgSecretCreate(namespace string, secret *drone.Secret) (*drone.Secret, error) {
	ret := _m.Called(namespace, secret)

	if len(ret) == 0 {
		panic("no return value specified for OrgSecretCreate")
	}

	var r0 *drone.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *drone.Secret) (*drone.Secret, error)); ok {
		return rf(namespace, secret)
	}
	if rf, ok := ret.Get(0).(func(string, *drone.Secret) *drone.Secret); ok {
		r0 = rf(namespace, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drone.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *drone.Secret) error); ok {
		r1 = rf(namespace, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrgSecretDelete provides a mock function with given fields: namespace, name
func (_m *MockDroneClient) OrgSecretDelete(namespace string, name string) error {
	ret := _m.Called(namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for OrgSecretDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(namespace, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrgSecretList provides a mock function with given fields: namespace
func (_m *MockDroneClient) OrgSecretList(namespace string) ([]*drone.Secret, error) {
	ret := _m.Called(namespace)

	if len(ret) == 0 {
		panic("no return value specified for OrgSecretList")
	}

	var r0 []*drone.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*drone.Secret, error)); ok {
		return rf(namespace)
	}
	if rf, ok := ret.Get(0).(func(string) []*drone.Secret); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*drone.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrgSecretListAll provides a mock function with given fields:
func (_m *MockDroneClient) OrgSecretListAll() ([]*drone.Secret, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OrgSecretListAll")
	}

	var r0 []*drone.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*drone.Secret, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*drone.Secret); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*drone.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrgSecretUpdate provides a mock function with given fields: namespace, secret
func (_m *MockDroneClient) OrgSecretUpdate(namespace string, secret *drone.Secret) (*drone.Secret, error) {
	ret := _m.Called(namespace, secret)

	if len(ret) == 0 {
		panic("no return value specified for OrgSecretUpdate")
	}

	var r0 *drone.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *drone.Secret) (*drone.Secret, error)); ok {
		return rf(namespace, secret)
	}
	if rf, ok := ret.Get(0).(func(string, *drone.Secret) *drone.Secret); ok {
		r0 = rf(namespace, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drone.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *drone.Secret) error); ok {
		r1 = rf(namespace, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Promote provides a mock function with given fields: namespace, name, build, target, params
func (_m *MockDroneClient) Promote(namespace string, name string, build int, target string, params map[string]string) (*drone.Build, error) {
	ret := _m.Called(namespace, name, build, target, params)

	if len(ret) == 0 {
		panic("no return value specified for Promote")
	}

	var r0 *drone.Build
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int, string, map[string]string) (*drone.Build, error)); ok {
		return rf(namespace, name, build, target, params)
	}
	if rf, ok := ret.Get(0).(func(string, string, int, string, map[string]string) *drone.Build); ok {
		r0 = rf(namespace, name, build, target, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drone.Build)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int, string, map[string]string) error); ok {
		r1 = rf(namespace, name, build, target, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Queue provides a mock function with given fields:
func (_m *MockDroneClient) Queue() ([]*drone.Stage, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Queue")
	}

	var r0 []*drone.Stage
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*drone.Stage, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*drone.Stage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*drone.Stage)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueuePause provides a mock function with given fields:
func (_m *MockDroneClient) QueuePause() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for QueuePause")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueueResume provides a mock function with given fields:
func (_m *MockDroneClient) QueueResume() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for QueueResume")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repo provides a mock function with given fields: namespace, name
func (_m *MockDroneClient) Repo(namespace string, name string) (*drone.Repo, error) {
	ret := _m.Called(namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for Repo")
	}

	var r0 *drone.Repo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*drone.Repo, error)); ok {
		return rf(namespace, name)
	}
	if rf, ok := ret.Get(0).(func(string, string) *drone.Repo); ok {
		r0 = rf(namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drone.Repo)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepoChown provides a mock function with given fields: namespace, name
func (_m *MockDroneClient) RepoChown(namespace string, name string) (*drone.Repo, error) {
	ret := _m.Called(namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for RepoChown")
	}

	var r0 *drone.Repo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*drone.Repo, error)); ok {
		return rf(namespace, name)
	}
	if rf, ok := ret.Get(0).(func(string, string) *drone.Repo); ok {
		r0 = rf(namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drone.Repo)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepoDelete provides a mock function with given fields: namespace, name
func (_m *MockDroneClient) RepoDelete(namespace string, name string) error {
	ret := _m.Called(namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for RepoDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(namespace, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepoDisable provides a mock function with given fields: namespace, name
func (_m *MockDroneClient) RepoDisable(namespace string, name string) error {
	ret := _m.Called(namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for RepoDisable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(namespace, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepoEnable provides a mock function with given fields: namespace, name
func (_m *MockDroneClient) RepoEnable(namespace string, name string) (*drone.Repo, error) {
	ret := _m.Called(namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for RepoEnable")
	}

	var r0 *drone.Repo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*drone.Repo, error)); ok {
		return rf(namespace, name)
	}
	if rf, ok := ret.Get(0).(func(string, string) *drone.Repo); ok {
		r0 = rf(namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drone.Repo)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepoList provides a mock function with given fields:
func (_m *MockDroneClient) RepoList() ([]*drone.Repo, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RepoList")
	}

	var r0 []*drone.Repo
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*drone.Repo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*drone.Repo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*drone.Repo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepoListAll provides a mock function with given fields: opts
func (_m *MockDroneClient) RepoListAll(opts drone.ListOptions) ([]*drone.Repo, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for RepoListAll")
	}

	var r0 []*drone.Repo
	var r1 error
	if rf, ok := ret.Get(0).(func(drone.ListOptions) ([]*drone.Repo, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(drone.ListOptions) []*drone.Repo); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*drone.Repo)
		}
	}

	if rf, ok := ret.Get(1).(func(drone.ListOptions) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepoListSync provides a mock function with given fields:
func (_m *MockDroneClient) RepoListSync() ([]*drone.Repo, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RepoListSync")
	}

	var r0 []*drone.Repo
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*drone.Repo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*drone.Repo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*drone.Repo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepoRepair provides a mock function with given fields: namespace, name
func (_m *MockDroneClient) RepoRepair(namespace string, name string) error {
	ret := _m.Called(namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for RepoRepair")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(namespace, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepoUpdate provides a mock function with given fields: namespace, name, repo
func (_m *MockDroneClient) RepoUpdate(namespace string, name string, repo *drone.RepoPatch) (*drone.Repo, error) {
	ret := _m.Called(namespace, name, repo)

	if len(ret) == 0 {
		panic("no return value specified for RepoUpdate")
	}

	var r0 *drone.Repo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, *drone.RepoPatch) (*drone.Repo, error)); ok {
		return rf(namespace, name, repo)
	}
	if rf, ok := ret.Get(0).(func(string, string, *drone.RepoPatch) *drone.Repo); ok {
		r0 = rf(namespace, name, repo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drone.Repo)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, *drone.RepoPatch) error); ok {
		r1 = rf(namespace, name, repo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Rollback provides a mock function with given fields: namespace, name, build, target, params
func (_m *MockDroneClient) Rollback(namespace string, name string, build int, target string, params map[string]string) (*drone.Build, error) {
	ret := _m.Called(namespace, name, build, target, params)

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 *drone.Build
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int, string, map[string]string) (*drone.Build, error)); ok {
		return rf(namespace, name, build, target, params)
	}
	if rf, ok := ret.Get(0).(func(string, string, int, string, map[string]string) *drone.Build); ok {
		r0 = rf(namespace, name, build, target, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drone.Build)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int, string, map[string]string) error); ok {
		r1 = rf(namespace, name, build, target, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Secret provides a mock function with given fields: owner, name, secret
func (_m *MockDroneClient) Secret(owner string, name string, secret string) (*drone.Secret, error) {
	ret := _m.Called(owner, name, secret)

	if len(ret) == 0 {
		panic("no return value specified for Secret")
	}

	var r0 *drone.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*drone.Secret, error)); ok {
		return rf(owner, name, secret)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *drone.Secret); ok {
		r0 = rf(owner, name, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drone.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(owner, name, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecretCreate provides a mock function with given fields: owner, name, secret
func (_m *MockDroneClient) SecretCreate(owner string, name string, secret *drone.Secret) (*drone.Secret, error) {
	ret := _m.Called(owner, name, secret)

	if len(ret) == 0 {
		panic("no return value specified for SecretCreate")
	}

	var r0 *drone.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, *drone.Secret) (*drone.Secret, error)); ok {
		return rf(owner, name, secret)
	}
	if rf, ok := ret.Get(0).(func(string, string, *drone.Secret) *drone.Secret); ok {
		r0 = rf(owner, name, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drone.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, *drone.Secret) error); ok {
		r1 = rf(owner, name, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecretDelete provides a mock function with given fields: owner, name, secret
func (_m *MockDroneClient) SecretDelete(owner string, name string, secret string) error {
	ret := _m.Called(owner, name, secret)

	if len(ret) == 0 {
		panic("no return value specified for SecretDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(owner, name, secret)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SecretList provides a mock function with given fields: owner, name
func (_m *MockDroneClient) SecretList(owner string, name string) ([]*drone.Secret, error) {
	ret := _m.Called(owner, name)

	if len(ret) == 0 {
		panic("no return value specified for SecretList")
	}

	var r0 []*drone.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]*drone.Secret, error)); ok {
		return rf(owner, name)
	}
	if rf, ok := ret.Get(0).(func(string, string) []*drone.Secret); ok {
		r0 = rf(owner, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*drone.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(owner, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecretUpdate provides a mock function with given fields: owner, name, secret
func (_m *MockDroneClient) SecretUpdate(owner string, name string, secret *drone.Secret) (*drone.Secret, error) {
	ret := _m.Called(owner, name, secret)

	if len(ret) == 0 {
		panic("no return value specified for SecretUpdate")
	}

	var r0 *drone.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, *drone.Secret) (*drone.Secret, error)); ok {
		return rf(owner, name, secret)
	}
	if rf, ok := ret.Get(0).(func(string, string, *drone.Secret) *drone.Secret); ok {
		r0 = rf(owner, name, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drone.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, *drone.Secret) error); ok {
		r1 = rf(owner, name, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Self provides a mock function with given fields:
func (_m *MockDroneClient) Self() (*drone.User, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Self")
	}

	var r0 *drone.User
	var r1 error
	if rf, ok := ret.Get(0).(func() (*drone.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *drone.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drone.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Server provides a mock function with given fields: name
func (_m *MockDroneClient) Server(name string) (*drone.Server, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Server")
	}

	var r0 *drone.Server
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*drone.Server, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *drone.Server); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drone.Server)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServerCreate provides a mock function with given fields:
func (_m *MockDroneClient) ServerCreate() (*drone.Server, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ServerCreate")
	}

	var r0 *drone.Server
	var r1 error
	if rf, ok := ret.Get(0).(func() (*drone.Server, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *drone.Server); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drone.Server)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServerDelete provides a mock function with given fields: name, force
func (_m *MockDroneClient) ServerDelete(name string, force bool) error {
	ret := _m.Called(name, force)

	if len(ret) == 0 {
		panic("no return value specified for ServerDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(name, force)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServerList provides a mock function with given fields:
func (_m *MockDroneClient) ServerList() ([]*drone.Server, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ServerList")
	}

	var r0 []*drone.Server
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*drone.Server, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*drone.Server); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*drone.Server)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetAddress provides a mock function with given fields: _a0
func (_m *MockDroneClient) SetAddress(_a0 string) {
	_m.Called(_a0)
}

// SetClient provides a mock function with given fields: _a0
func (_m *MockDroneClient) SetClient(_a0 *http.Client) {
	_m.Called(_a0)
}

// Sign provides a mock function with given fields: owner, name, file
func (_m *MockDroneClient) Sign(owner string, name string, file string) (string, error) {
	ret := _m.Called(owner, name, file)

	if len(ret) == 0 {
		panic("no return value specified for Sign")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (string, error)); ok {
		return rf(owner, name, file)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) string); ok {
		r0 = rf(owner, name, file)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(owner, name, file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Template provides a mock function with given fields: namespace, name
func (_m *MockDroneClient) Template(namespace string, name string) (*drone.Template, error) {
	ret := _m.Called(namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for Template")
	}

	var r0 *drone.Template
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*drone.Template, error)); ok {
		return rf(namespace, name)
	}
	if rf, ok := ret.Get(0).(func(string, string) *drone.Template); ok {
		r0 = rf(namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drone.Template)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TemplateCreate provides a mock function with given fields: namespace, template
func (_m *MockDroneClient) TemplateCreate(namespace string, template *drone.Template) (*drone.Template, error) {
	ret := _m.Called(namespace, template)

	if len(ret) == 0 {
		panic("no return value specified for TemplateCreate")
	}

	var r0 *drone.Template
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *drone.Template) (*drone.Template, error)); ok {
		return rf(namespace, template)
	}
	if rf, ok := ret.Get(0).(func(string, *drone.Template) *drone.Template); ok {
		r0 = rf(namespace, template)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drone.Template)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *drone.Template) error); ok {
		r1 = rf(namespace, template)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TemplateDelete provides a mock function with given fields: namespace, name
func (_m *MockDroneClient) TemplateDelete(namespace string, name string) error {
	ret := _m.Called(namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for TemplateDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(namespace, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TemplateList provides a mock function with given fields: namespace
func (_m *MockDroneClient) TemplateList(namespace string) ([]*drone.Template, error) {
	ret := _m.Called(namespace)

	if len(ret) == 0 {
		panic("no return value specified for TemplateList")
	}

	var r0 []*drone.Template
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*drone.Template, error)); ok {
		return rf(namespace)
	}
	if rf, ok := ret.Get(0).(func(string) []*drone.Template); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*drone.Template)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TemplateListAll provides a mock function with given fields:
func (_m *MockDroneClient) TemplateListAll() ([]*drone.Template, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TemplateListAll")
	}

	var r0 []*drone.Template
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*drone.Template, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*drone.Template); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*drone.Template)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TemplateUpdate provides a mock function with given fields: namespace, name, template
func (_m *MockDroneClient) TemplateUpdate(namespace string, name string, template *drone.Template) (*drone.Template, error) {
	ret := _m.Called(namespace, name, template)

	if len(ret) == 0 {
		panic("no return value specified for TemplateUpdate")
	}

	var r0 *drone.Template
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, *drone.Template) (*drone.Template, error)); ok {
		return rf(namespace, name, template)
	}
	if rf, ok := ret.Get(0).(func(string, string, *drone.Template) *drone.Template); ok {
		r0 = rf(namespace, name, template)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drone.Template)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, *drone.Template) error); ok {
		r1 = rf(namespace, name, template)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// User provides a mock function with given fields: login
func (_m *MockDroneClient) User(login string) (*drone.User, error) {
	ret := _m.Called(login)

	if len(ret) == 0 {
		panic("no return value specified for User")
	}

	var r0 *drone.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*drone.User, error)); ok {
		return rf(login)
	}
	if rf, ok := ret.Get(0).(func(string) *drone.User); ok {
		r0 = rf(login)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drone.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserCreate provides a mock function with given fields: user
func (_m *MockDroneClient) UserCreate(user *drone.User) (*drone.User, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for UserCreate")
	}

	var r0 *drone.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*drone.User) (*drone.User, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*drone.User) *drone.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drone.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*drone.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserDelete provides a mock function with given fields: login
func (_m *MockDroneClient) UserDelete(login string) error {
	ret := _m.Called(login)

	if len(ret) == 0 {
		panic("no return value specified for UserDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(login)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserList provides a mock function with given fields:
func (_m *MockDroneClient) UserList() ([]*drone.User, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UserList")
	}

	var r0 []*drone.User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*drone.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*drone.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*drone.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserUpdate provides a mock function with given fields: login, user
func (_m *MockDroneClient) UserUpdate(login string, user *drone.UserPatch) (*drone.User, error) {
	ret := _m.Called(login, user)

	if len(ret) == 0 {
		panic("no return value specified for UserUpdate")
	}

	var r0 *drone.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *drone.UserPatch) (*drone.User, error)); ok {
		return rf(login, user)
	}
	if rf, ok := ret.Get(0).(func(string, *drone.UserPatch) *drone.User); ok {
		r0 = rf(login, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drone.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *drone.UserPatch) error); ok {
		r1 = rf(login, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Verify provides a mock function with given fields: owner, name, file
func (_m *MockDroneClient) Verify(owner string, name string, file string) error {
	ret := _m.Called(owner, name, file)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(owner, name, file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// newMockDroneClient creates a new instance of MockDroneClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockDroneClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDroneClient {
	mock := &MockDroneClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
